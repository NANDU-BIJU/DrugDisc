from django.db import models

class Compound(models.Model):
    # Represents a compound molecule
    name = models.CharField(max_length=255)
    # Define fields for atomic, physicochemical, and structural properties of the compound
    # Example: atomic_weight = models.FloatField()
    # Example: physicochemical_property = models.CharField(max_length=255)
    # Example: structural_property = models.CharField(max_length=255)
    # Add more fields as needed

class Protein(models.Model):
    # Represents a protein
    name = models.CharField(max_length=255)
    gene_name = models.CharField(max_length=255)
    # Define fields for protein features
    # Example: domain_structure = models.CharField(max_length=255)
    # Example: binding_site = models.CharField(max_length=255)
    # Add more fields as needed

class Bioactivity(models.Model):
    # Represents experimental bioactivity data
    compound = models.ForeignKey(Compound, on_delete=models.CASCADE)
    protein = models.ForeignKey(Protein, on_delete=models.CASCADE)
    pChEMBL_value = models.FloatField()
    # Define fields for other bioactivity-related data
    # Example: assay_type = models.CharField(max_length=255)
    # Example: interaction_type = models.CharField(max_length=255)
    # Add more fields as needed

class GeneratedMolecule(models.Model):
    # Represents a molecule generated by DrugGEN
    compound = models.ForeignKey(Compound, on_delete=models.CASCADE)
    protein = models.ForeignKey(Protein, on_delete=models.CASCADE)
    # Define fields for other generated molecule properties
    # Example: generation_method = models.CharField(max_length=255)
    # Example: similarity_score = models.FloatField()
    # Add more fields as needed

class InputData(models.Model):
    # Define fields for input data (e.g., compounds, proteins, bioactivity data)
    compound_name = models.CharField(max_length=100)
    smiles_notation = models.CharField(max_length=255)
    # Add more fields as needed

    def __str__(self):
        return self.compound_name